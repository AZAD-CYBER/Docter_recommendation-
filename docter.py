# -*- coding: utf-8 -*-
"""docter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x-WevAPrl9h79-PE-G2dj4v2TK59E8bP
"""

import pandas as pd
import pickle
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

# load data into a pandas dataframe
df = pd.read_csv('doctor.csv', encoding='ISO-8859-1')

"""# New section"""

df.head()

df.shape

df.isnull().sum()

# analyse the distribution of data in the salary
fig, ax = plt.subplots(figsize=(8,8))
sns.distplot(df.rating)

df['rating'].fillna(df['rating'].median(),inplace=True)

df.isnull().sum()

df['rating'].value_counts()

# extract features
features = df[['rating', 'experience']]

# convert location to numerical values
le = LabelEncoder()
df['location'] = le.fit_transform(df['location'])
features['location'] = df['location']
# df.loc[:, 'location'] = df['location']

features.head(10)

features.describe()

# separating the data and labels
X = features.drop(columns = 'rating', axis=1)
Y = features['rating']

scaler = StandardScaler()
scaler.fit(features)
X_standardized = scaler.transform(features)

# print(X_standardized)

# train a KNN model
knn = NearestNeighbors(n_neighbors=53)
knn.fit(X_standardized)

# recommend doctors to a user
# user = [10, 5, 1] 
user = list(map(int,input().split())) # 2 is the encoded value for 'New York'

# Saving model to disk
pickle.dump(knn, open('model.pkl','wb'))

# Loading model to compare the results
model = pickle.load(open('model.pkl','rb'))
distances, indices = model.kneighbors([user])
if 'name' in df.columns:
    # rest of the code
    for i in indices[0]:
      print(df.iloc[i]['name'])
      # print(df.iloc[i]["rating"],end=" ")
      # print(df.iloc[i]["experience"],end=" ")
      # print(df.iloc[i]["location"])
      
else:
    print("The column 'name' is not present in the dataframe.")

# display the recommended doctors